#!/usr/bin/env bash
# vim:et:ft=sh:sts=2:sw=2
#
# Copyright 2008-2016 Kate Ward. All Rights Reserved.
# Released under the Apache License 2.0.
#
# shFlags -- Advanced command-line flag library for Unix shell scripts.
# http://code.google.com/p/shflags/
#
# Author: kate.ward@forestent.com (Kate Ward)
#
# This module implements something like the google-gflags library available
# from http://code.google.com/p/google-gflags/.
#
# FLAG TYPES: This is a list of the DEFINE_*'s that you can do.  All flags take
# a name, default value, help-string, and optional 'short' name (one-letter
# name).  Some flags have other arguments, which are described with the flag.
#
# DEFINE_string: takes any input, and intreprets it as a string.
#
# DEFINE_boolean: does not take any arguments. Say --myflag to set
#   FLAGS_myflag to true, or --nomyflag to set FLAGS_myflag to false. For short
#   flags, passing the flag on the command-line negates the default value, i.e.
#   if the default is true, passing the flag sets the value to false.
#
# DEFINE_integer: takes an input and intreprets it as an integer.
#
# SPECIAL FLAGS: There are a few flags that have special meaning:
#   --help (or -?)  prints a list of all the flags in a human-readable fashion
#   --              as in getopt(), terminates flag-processing
#
# EXAMPLE USAGE:
#
#   -- begin hello.sh --
#   #! /usr/bin/env bash
#   source shflags
#   DEFINE_string name 'world' "somebody's name" n
#   FLAGS "$@" || exit $?
#   set -- "${FLAGS_ARGV[@]}"
#   echo "Hello, ${FLAGS_name}."
#   -- end hello.sh --
#
#   $ ./hello.sh -n Kate
#   Hello, Kate.
#
# CUSTOMIZABLE BEHAVIOR:
#
# A script can override the default 'getopt' command by providing the path to
# an alternate implementation by defining the FLAGS_GETOPT_CMD variable.

#==============================================================================
# shFlags
#
# Shared attributes:
#   g__last_flags_error:  last error message
#   g__last_flags_return: last return value
#
#   g__flags_bool_names:  list of boolean flag names
#   g__flags_long_names:  list of long names for all flags
#   g__flags_short_names: list of short names for all flags
#
#   g__flags_opts: options parsed by getopt
#
# Per-flag attributes:
#     FLAGS_<flag_name>:         contains value of flag named 'flag_name'
#   __flags_<flag_name>_default: the default flag value
#   __flags_<flag_name>_help:    the flag help string
#   __flags_<flag_name>_short:   the flag short name
#   __flags_<flag_name>_type:    the flag type
#
# Notes:
# - lists of strings are space separated, and a null value is the '~' char.

# return if FLAGS already loaded
if [[ -n "${FLAGS_VERSION:-}" ]]; then
  return 0
fi

readonly FLAGS_VERSION='1.2.0'

# return values that scripts can use
readonly FLAGS_TRUE=0
readonly FLAGS_FALSE=1
readonly FLAGS_ERROR=2

# commands a user can override if needed
readonly FLAGS_GETOPT_CMD=${FLAGS_GETOPT_CMD:-getopt}

#
# constants
#

# reserved flag names
readonly __FLAGS_RESERVED_LIST=' ARGC ARGV ERROR FALSE GETOPT_CMD HELP PARENT TRUE VERSION'

# getopt optstring lengths
readonly __FLAGS_OPTSTR_SHORT=0
readonly __FLAGS_OPTSTR_LONG=1

readonly __FLAGS_NULL='~'

# flag info strings
readonly __FLAGS_INFO_DEFAULT='default'
readonly __FLAGS_INFO_HELP='help'
readonly __FLAGS_INFO_SHORT='short'
readonly __FLAGS_INFO_TYPE='type'

# flag lengths
readonly __FLAGS_LEN_SHORT=0
readonly __FLAGS_LEN_LONG=1

# flag types
readonly __FLAGS_TYPE_NONE=0
readonly __FLAGS_TYPE_BOOLEAN=1
readonly __FLAGS_TYPE_INTEGER=3
readonly __FLAGS_TYPE_STRING=4

#
# internal variables
#

# space separated lists
g__flags_bool_names=' '  # boolean flag names
g__flags_long_names=' '  # long flag names
g__flags_short_names=' '  # short flag names
g__flags_defined_names=' ' # defined flag names (used for validation)

g__flags_opts=''  # temporary storage for parsed getopt flags

#------------------------------------------------------------------------------
# private functions
#

# logging functions
function _flags_debug { echo "flags:DEBUG $@" >&2; }
function _flags_warn  { echo "flags:WARN  $@" >&2; }
function _flags_error { echo "flags:ERROR $@" >&2; }
function _flags_fatal { echo "flags:FATAL $@" >&2; exit ${FLAGS_ERROR}; }

# Define a flag.
#
# Calling this function will define the following info variables for the
# specified flag:
#   FLAGS_flagname - the name for this flag (based upon the long flag name)
#   __flags_<flag_name>_default - the default value
#   __flags_flagname_help - the help string
#   __flags_flagname_short - the single letter alias
#   __flags_flagname_type - the type of flag (one of __FLAGS_TYPE_*)
#
# Args:
#   _flags__type: integer: internal type of flag (__FLAGS_TYPE_*)
#   _flags__name: string: long flag name
#   _flags__default: default flag value
#   _flags__help: string: help string
#   _flags__short: string: (optional) short flag name
# Returns:
#   integer: success of operation, or error
function _flags_define {
  if [ $# -lt 4 ]; then
    g__last_flags_error='DEFINE error: too few arguments'
    g__last_flags_return=${FLAGS_ERROR}
    _flags_error "${g__last_flags_error=}"
    return ${g__last_flags_return}
  fi

  local _flags_type_=$1
  local _flags_name_=$2
  local _flags_default_=$3
  local _flags_help_=$4
  local _flags_short_=${5:-${__FLAGS_NULL}}

  local _flags_return_=${FLAGS_TRUE}
  local _flags_usName_="${_flags_name_//-/_}"

  # check whether the flag name is reserved
  _flags_itemInList ${_flags_usName_} "${__FLAGS_RESERVED_LIST}"
  if [ $? -eq ${FLAGS_TRUE} ]; then
    g__last_flags_error="flag name (${_flags_name_}) is reserved"
    _flags_return_=${FLAGS_ERROR}
  fi

  # check for existing long name definition
  if [ ${_flags_return_} -eq ${FLAGS_TRUE} ]; then
    if _flags_itemInList ${_flags_usName_} ${g__flags_defined_names}; then
      g__last_flags_error="definition for ([no]${_flags_name_}) already exists"
      _flags_warn "${g__last_flags_error}"
      _flags_return_=${FLAGS_FALSE}
    fi
  fi

  # check for existing short name definition
  if [[ ${_flags_return_} -eq ${FLAGS_TRUE} && "${_flags_short_}" != "${__FLAGS_NULL}" ]]
  then
    if _flags_itemInList "${_flags_short_}" ${g__flags_short_names}; then
      g__last_flags_error="flag short name (${_flags_short_}) already defined"
      _flags_warn "${g__last_flags_error}"
      _flags_return_=${FLAGS_FALSE}
    fi
  fi

  # handle default value. note, on several occasions the 'if' portion of an
  # if/then/else contains just a ':' which does nothing. a binary reversal via
  # '!' is not done because it does not work on all shells.
  if [ ${_flags_return_} -eq ${FLAGS_TRUE} ]; then
    case ${_flags_type_} in
      ${__FLAGS_TYPE_BOOLEAN})
        if _flags_validBool "${_flags_default_}"; then
          case ${_flags_default_} in
            true|t|0) _flags_default_=${FLAGS_TRUE} ;;
            false|f|1) _flags_default_=${FLAGS_FALSE} ;;
          esac
        else
          g__last_flags_error="invalid default flag value '${_flags_default_}'"
          _flags_return_=${FLAGS_ERROR}
        fi
        ;;

      ${__FLAGS_TYPE_INTEGER})
        if _flags_validInt "${_flags_default_}"; then
          :
        else
          g__last_flags_error="invalid default flag value '${_flags_default_}'"
          _flags_return_=${FLAGS_ERROR}
        fi
        ;;

      ${__FLAGS_TYPE_STRING}) ;;  # everything in shell is a valid string

      *)
        g__last_flags_error="unrecognized flag type '${_flags_type_}'"
        _flags_return_=${FLAGS_ERROR}
        ;;
    esac
  fi

  if [ ${_flags_return_} -eq ${FLAGS_TRUE} ]; then
    # store flag information
    eval "FLAGS_${_flags_usName_}='${_flags_default_}'"
    eval "__flags_${_flags_usName_}_${__FLAGS_INFO_TYPE}=${_flags_type_}"
    eval "__flags_${_flags_usName_}_${__FLAGS_INFO_DEFAULT}=\"${_flags_default_}\""
    eval "__flags_${_flags_usName_}_${__FLAGS_INFO_HELP}=\"${_flags_help_}\""
    eval "__flags_${_flags_usName_}_${__FLAGS_INFO_SHORT}='${_flags_short_}'"

    # append flag names to name lists
    g__flags_short_names="${g__flags_short_names}${_flags_short_} "
    g__flags_long_names="${g__flags_long_names}${_flags_name_} "
    if [[ ${_flags_type_} -eq ${__FLAGS_TYPE_BOOLEAN} ]]; then
      g__flags_bool_names="${g__flags_bool_names}no${_flags_name_} "
    fi

    # append flag names to defined names for later validation checks
    g__flags_defined_names="${g__flags_defined_names}${_flags_usName_} "
    if [[ ${_flags_type_} -eq ${__FLAGS_TYPE_BOOLEAN} ]]; then
      g__flags_defined_names="${g__flags_defined_names}no${_flags_usName_} "
    fi
  fi

  g__last_flags_return=${_flags_return_}
  if [[ ${g__last_flags_return} -eq ${FLAGS_ERROR} ]]; then
    _flags_error "${g__last_flags_error}"
  fi

  return ${g__last_flags_return}
}

# Return valid getopt options using currently defined list of long options.
#
# This function builds a proper getopt option string for short (and long)
# options, using the current list of long options for reference.
#
# Args:
#   _flags_optStr: integer: option string type (__FLAGS_OPTSTR_*)
# Output:
#   string: generated option string for getopt
# Returns:
#   boolean: success of operation (always returns True)
function _flags_genOptStr {
  local _flags_optStrType_=$1

  local _flags_opts_=''

  local _flags_name_
  for _flags_name_ in ${g__flags_long_names}; do
    local _flags_usName_="${_flags_name_//-/_}"
    local _flags_type_="$(_flags_getFlagInfo ${_flags_usName_} ${__FLAGS_INFO_TYPE})"
    if [[ $? -ne ${FLAGS_TRUE} ]]; then
      _flags_fatal 'call to _flags_type_ failed'
    fi
    case ${_flags_optStrType_} in
      ${__FLAGS_OPTSTR_SHORT})
        local _flags_shortName_="$(_flags_getFlagInfo ${_flags_usName_} ${__FLAGS_INFO_SHORT})"
        if [ "${_flags_shortName_}" != "${__FLAGS_NULL}" ]; then
          _flags_opts_="${_flags_opts_}${_flags_shortName_}"
          # getopt needs a trailing ':' to indicate a required argument
          if [[ ${_flags_type_} -ne ${__FLAGS_TYPE_BOOLEAN} ]]; then
            _flags_opts_="${_flags_opts_}:"
          fi
        fi
        ;;

      ${__FLAGS_OPTSTR_LONG})
        _flags_opts_="${_flags_opts_:+${_flags_opts_},}${_flags_name_}"
        # getopt needs a trailing ':' to indicate a required argument
        if [[ ${_flags_type_} -ne ${__FLAGS_TYPE_BOOLEAN} ]]; then
          _flags_opts_="${_flags_opts_}:"
        fi
        ;;
    esac
  done

  echo "${_flags_opts_}"
  return ${FLAGS_TRUE}
}

# Returns flag details based on a flag name and flag info.
#
# Args:
#   string: underscored flag name
#   string: flag info (see the _flags_define function for valid info types)
# Output:
#   string: value of dereferenced flag variable
# Returns:
#   integer: one of FLAGS_{TRUE|FALSE|ERROR}
function _flags_getFlagInfo {
  # note: adding gFI to variable names to prevent naming conflicts with calling
  # functions
  local _flags_gFI_usName_=$1
  local _flags_gFI_info_=$2

  local _flags_infoVar_="__flags_${_flags_gFI_usName_}_${_flags_gFI_info_}"
  local _flags_infoValue_
  eval "_flags_infoValue_=\"\${${_flags_infoVar_}:-}\""
  if [ -n "${_flags_infoValue_}" ]; then
    g__last_flags_return=${FLAGS_TRUE}
  else
    # see if the _flags_gFI_usName_ variable is a string as strings can be
    # empty...
    # note: the DRY principle would say to have this function call itself for
    # the next three lines, but doing so results in an infinite loop as an
    # invalid _flags_name_ will also not have the associated _type variable.
    # Because it doesn't (it will evaluate to an empty string) the logic will
    # try to find the _type variable of the _type variable, and so on. Not so
    # good ;-)
    local _flags_typeVar_="__flags_${_flags_gFI_usName_}_${__FLAGS_INFO_TYPE}"
    local _flags_typeValue_
    eval "_flags_typeValue_=\"\${${_flags_typeVar_}:-}\""
    if [ "${_flags_typeValue_}" = "${__FLAGS_TYPE_STRING}" ]; then
      g__last_flags_return=${FLAGS_TRUE}
    else
      g__last_flags_return=${FLAGS_ERROR}
      g__last_flags_error="missing flag info variable (${_flags_infoVar_})"
    fi
  fi

  echo "${_flags_infoValue_}"
  if [[ ${g__last_flags_return} -eq ${FLAGS_ERROR} ]]; then
    _flags_error "${g__last_flags_error}"
  fi
  return ${g__last_flags_return}
}

# Check for presense of item in a list.
#
# Passed a string (e.g. 'abc'), this function will determine if the string is
# present in the list of strings (e.g.  ' foo bar abc ').
#
# Args:
#   _flags_str_: string: string to search for in a list of strings
#   unnamed: list: list of strings
# Returns:
#   boolean: true if item is in the list
function _flags_itemInList {
  local _flags_str_=$1
  shift


  if [[ " ${*:-} " =~ " ${_flags_str_} " ]]; then
    g__last_flags_return=${FLAGS_TRUE}
  else
    g__last_flags_return=${FLAGS_FALSE}
  fi

  return ${g__last_flags_return}
}

# Validate a boolean.
#
# Args:
#   _flags__bool: boolean: value to validate
# Returns:
#   bool: true if the value is a valid boolean
function _flags_validBool {
  local _flags_bool_=$1

  g__last_flags_return=${FLAGS_TRUE}
  case "${_flags_bool_}" in
    true|t|0) ;;
    false|f|1) ;;
    *) g__last_flags_return=${FLAGS_FALSE} ;;
  esac

  return ${g__last_flags_return}
}

# Validate an integer.
#
# Args:
#   _flags_int_: integer: value to validate
# Returns:
#   bool: true if the value is a valid integer
function _flags_validInt {
  g__last_flags_return=${FLAGS_FALSE}
  if [ -z "${1:-}" ]; then
    return ${g__last_flags_return}
  fi
  local _flags_int_=$1

  case ${_flags_int_} in
    -*)  # strip possible leading negative sign
      _flags_int_=${_flags_int_#-}
      ;;
  esac

  case ${_flags_int_} in
    *[!0-9]*) g__last_flags_return=${FLAGS_FALSE} ;;
    *) g__last_flags_return=${FLAGS_TRUE} ;;
  esac

  return ${g__last_flags_return}
}

# Parse command-line options using the enhanced getopt.
#
# Note: the flag options are passed around in the global g__flags_opts so that
# the formatting is not lost due to shell parsing and such.
#
# Args:
#   @: varies: command-line options to parse
# Returns:
#   integer: a FLAGS success condition
function _flags_getoptEnhanced {
  g__last_flags_return=${FLAGS_TRUE}
  local _flags_shortOpts_="$(_flags_genOptStr ${__FLAGS_OPTSTR_SHORT})"
  local _flags_longOpts_="$(_flags_genOptStr ${__FLAGS_OPTSTR_LONG})"
  local _flags_boolOpts_
  _flags_boolOpts_="${g__flags_bool_names#"${g__flags_bool_names%%[![:space:]]*}"}"
  _flags_boolOpts_="${_flags_boolOpts_%"${_flags_boolOpts_##*[![:space:]]}"}"
  _flags_boolOpts_="${_flags_boolOpts_# }"
  _flags_boolOpts_="${_flags_boolOpts_// /,}"

  g__flags_opts="$(${FLAGS_GETOPT_CMD} \
      -o "${_flags_shortOpts_}" \
      -l "${_flags_longOpts_}${_flags_boolOpts_:+,${_flags_boolOpts_:+}}" \
      -- "$@" 2>&1)"
  local _flags_rtrn_=$?
  if [ ${_flags_rtrn_} -ne ${FLAGS_TRUE} ]; then
    _flags_warn "${g__flags_opts}"
    g__last_flags_error='unable to parse provided options with getopt.'
    g__last_flags_return=${FLAGS_ERROR}
  fi

  return ${g__last_flags_return}
}

# Dynamically parse a getopt result and set appropriate variables.
#
# This function does the actual conversion of getopt output and runs it through
# the standard case structure for parsing. The case structure is actually quite
# dynamic to support any number of flags.
#
# Args:
#   argc: int: original command-line argument count
#   @: varies: output from getopt parsing
# Returns:
#   integer: a FLAGS success condition
function _flags_parseGetopt {
  local _flags_argc_=$1
  shift

  g__last_flags_return=${FLAGS_TRUE}

  # note the quotes around the $@ -- they are essential!
  eval set -- "$@"

  # handle options. note options with values must do an additional shift
  while true; do
    local _flags_opt_=$1
    local _flags_arg_=${2:-}
    local _flags_type_=${__FLAGS_TYPE_NONE}
    local _flags_name_=''
    local _flags_len_
    local _flags_pos_

    # determine long flag name
    case "${_flags_opt_}" in
      --) # discontinue option parsing
        shift; break 
        ;;  # discontinue option parsing

      --*)  # long option
        _flags_opt_=${_flags_opt_#*--}
        _flags_len_=${__FLAGS_LEN_LONG}
        if _flags_itemInList "${_flags_opt_}" ${g__flags_long_names}; then
          _flags_name_=${_flags_opt_}
        else
          # check for negated long boolean version
          if _flags_itemInList "${_flags_opt_}" ${g__flags_bool_names}; then
            _flags_name_=${_flags_opt_#*no}
            _flags_type_=${__FLAGS_TYPE_BOOLEAN}
            _flags_arg_=${__FLAGS_NULL}
          fi
        fi
        ;;

      -*)  # short option
        _flags_opt_=${_flags_opt_#*-}
        _flags_len_=${__FLAGS_LEN_SHORT}
        if _flags_itemInList "${_flags_opt_}" ${g__flags_short_names}; then
          # yes. match short name to long name. note purposeful off-by-one
          # (too high) with awk calculations.
          _flags_pos_="$(echo "${g__flags_short_names}" | awk 'BEGIN{RS=" ";rn=0}$0==e{rn=NR}END{print rn}' e=${_flags_opt_})"
          _flags_name_="$(echo "${g__flags_long_names}" | awk 'BEGIN{RS=" "}rn==NR{print $0}' rn="${_flags_pos_}")"
        fi
        ;;
    esac

    # die if the flag was unrecognized
    if [ -z "${_flags_name_}" ]; then
      g__last_flags_error="unrecognized option (${_flags_opt_})"
      g__last_flags_return=${FLAGS_ERROR}
      break
    fi

    # set new flag value
    local _flags_usName_="${_flags_name_//-/_}"
    if [[ ${_flags_type_} -eq ${__FLAGS_TYPE_NONE} ]]; then
      _flags_type_="$(_flags_getFlagInfo "${_flags_usName_}" ${__FLAGS_INFO_TYPE})"
    fi
    case ${_flags_type_} in
      ${__FLAGS_TYPE_BOOLEAN})
        if [ ${_flags_len_} -eq ${__FLAGS_LEN_LONG} ]; then
          if [ "${_flags_arg_}" != "${__FLAGS_NULL}" ]; then
            eval "FLAGS_${_flags_usName_}=${FLAGS_TRUE}"
          else
            eval "FLAGS_${_flags_usName_}=${FLAGS_FALSE}"
          fi
        else
          local _flags_val_
          eval "_flags_val_=\${__flags_${_flags_usName_}_${__FLAGS_INFO_DEFAULT}}"
          if [ ${_flags_val_} -eq ${FLAGS_FALSE} ]; then
            eval "FLAGS_${_flags_usName_}=${FLAGS_TRUE}"
          else
            eval "FLAGS_${_flags_usName_}=${FLAGS_FALSE}"
          fi
        fi
        ;;

      ${__FLAGS_TYPE_INTEGER})
        if _flags_validInt "${_flags_arg_}"; then
          eval "FLAGS_${_flags_usName_}='${_flags_arg_}'"
        else
          g__last_flags_error="invalid integer value (${_flags_arg_})"
          g__last_flags_return=${FLAGS_ERROR}
          break
        fi
        ;;

      ${__FLAGS_TYPE_STRING})
        eval "FLAGS_${_flags_usName_}='${_flags_arg_}'"
        ;;
    esac

    # shift the option and non-boolean arguements out.
    shift
    if [[ ${_flags_type_} != ${__FLAGS_TYPE_BOOLEAN} ]]; then
      shift
    fi
  done

  # give user back non-flag arguments
  if [[ $# -gt 0 ]]; then
    FLAGS_ARGV=("$1")
    shift
  fi

  while [[ $# -gt 0 ]]; do
    FLAGS_ARGV=("${FLAGS_ARGV[@]}" "$1")
    shift
  done

  return ${g__last_flags_return}
}

#------------------------------------------------------------------------------
# public functions
# 
# A basic boolean flag. Boolean flags do not take any arguments, and their
# value is either 1 (false) or 0 (true). For long flags, the false value is
# specified on the command line by prepending the word 'no'. With short flags,
# the presense of the flag toggles the current value between true and false.
# Specifying a short boolean flag twice on the command results in returning the
# value back to the default value.
#
# A default value is required for boolean flags.
#
# For example, lets say a Boolean flag was created whose long name was 'update'
# and whose short name was 'x', and the default value was 'false'. This flag
# could be explicitly set to 'true' with '--update' or by '-x', and it could be
# explicitly set to 'false' with '--noupdate'.
function DEFINE_boolean { _flags_define ${__FLAGS_TYPE_BOOLEAN} "$@"; }

# Other basic flags.
function DEFINE_integer { _flags_define ${__FLAGS_TYPE_INTEGER} "$@"; }
function DEFINE_string  { _flags_define ${__FLAGS_TYPE_STRING} "$@"; }

# Parse the flags.
#
# Args:
#   unnamed: list: command-line flags to parse
# Returns:
#   integer: success of operation, or error
function FLAGS {
  set -efu

  # parse options
  if [ $# -gt 0 ]; then
    _flags_getoptEnhanced "$@"
    g__last_flags_return=$?
  else
    # nothing passed; won't bother running getopt
    g__flags_opts='--'
    g__last_flags_return=${FLAGS_TRUE}
  fi

  if [ ${g__last_flags_return} -eq ${FLAGS_TRUE} ]; then
    _flags_parseGetopt $# "${g__flags_opts}"
    g__last_flags_return=$?
  fi

  if [[ ${g__last_flags_return} -eq ${FLAGS_ERROR} ]]; then
    _flags_fatal "${g__last_flags_error}"
    return ${g__last_flags_return}
  fi

  if [[ "${#FLAGS_ARGV[@]}" -gt 0 ]]; then
    eval set -- "${FLAGS_ARGV[@]}"
  else
    set --
  fi

  main "$@"
}

# This is effectively a 'usage()' function. It prints usage information and
# exits the program with ${FLAGS_FALSE} if it is ever found in the command line
# arguments. Note this function can be overridden so other apps can define
# their own --help flag, replacing this one, if they want.
#
# Args:
#   none
# Returns:
#   integer: success of operation (always returns true)
function flags_help {
  if [ -n "${FLAGS_HELP:-}" ]; then
    echo "${FLAGS_HELP}" >&2
  else
    echo "USAGE: ${FLAGS_PARENT:-$0} [flags] args" >&2
  fi
  if [ -n "${g__flags_long_names}" ]; then
    echo 'flags:' >&2
    local flags_name_
    for flags_name_ in ${g__flags_long_names}; do
      local flags_flagStr_=''
      local flags_boolStr_=''
      local flags_usName_="${flags_name_//-/_}"

      local flags_default_="$(_flags_getFlagInfo "${flags_usName_}" ${__FLAGS_INFO_DEFAULT})"
      local flags_help_="$(_flags_getFlagInfo "${flags_usName_}" ${__FLAGS_INFO_HELP})"
      local flags_short_="$(_flags_getFlagInfo "${flags_usName_}" ${__FLAGS_INFO_SHORT})"
      local flags_type_="$(_flags_getFlagInfo "${flags_usName_}" ${__FLAGS_INFO_TYPE})"

      if [[ "${flags_short_}" != "${__FLAGS_NULL}" ]]; then
        flags_flagStr_="-${flags_short_}"
      fi

      if [[ "${flags_short_}" != "${__FLAGS_NULL}" ]]; then
        flags_flagStr_="${flags_flagStr_},"
      fi
      # add [no] to long boolean flag names, except the 'help' flag
      if [[ ${flags_type_} -eq ${__FLAGS_TYPE_BOOLEAN} && "${flags_usName_}" != 'help' ]]; then
        flags_boolStr_='[no]'
      fi

      flags_flagStr_="${flags_flagStr_}--${flags_boolStr_}${flags_name_}:"

      local flags_defaultStr_
      case ${flags_type_} in
        ${__FLAGS_TYPE_BOOLEAN})
          if [ ${flags_default_} -eq ${FLAGS_TRUE} ]; then
            flags_defaultStr_='true'
          else
            flags_defaultStr_='false'
          fi
          ;;
        ${__FLAGS_TYPE_INTEGER})
          flags_defaultStr_=${flags_default_} ;;
        ${__FLAGS_TYPE_STRING}) flags_defaultStr_="'${flags_default_}'" ;;
      esac
      flags_defaultStr_="(default: ${flags_defaultStr_})"

      local flags_helpStr_="  ${flags_flagStr_}  ${flags_help_} ${flags_defaultStr_}"

      echo "${flags_helpStr_}" >&2
    done
  fi

  return ${FLAGS_TRUE}
}

# Reset shflags back to an uninitialized state.
#
# Args:
#   none
# Returns:
#   nothing
function flags_reset {
  local flags_name_
  for flags_name_ in ${g__flags_long_names}; do
    loal flags_usName_="${flags_name_//-/_}"
    eval unset "FLAGS_${flags_usName_}"
    local flags_name_
    for flags_type_ in ${__FLAGS_INFO_DEFAULT} ${__FLAGS_INFO_HELP} ${__FLAGS_INFO_SHORT} ${__FLAGS_INFO_TYPE}; do
      eval unset "__flags_${flags_usName_}_${flags_type_}"
    done
  done

  # reset internal variables
  g__flags_bool_names=' '
  g__flags_long_names=' '
  g__flags_short_names=' '
  g__flags_defined_names=' '
}
